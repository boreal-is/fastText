// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: WordVector.proto

#include "WordVector.pb.h"
#include "WordVector.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace WordVector {

static const char* WordVector_method_names[] = {
  "/WordVector.WordVector/DetectLanguages",
  "/WordVector.WordVector/GetVectors",
};

std::unique_ptr< WordVector::Stub> WordVector::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WordVector::Stub> stub(new WordVector::Stub(channel));
  return stub;
}

WordVector::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DetectLanguages_(WordVector_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVectors_(WordVector_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WordVector::Stub::DetectLanguages(::grpc::ClientContext* context, const ::WordVector::DetectLanguagesRequest& request, ::WordVector::DetectLanguagesReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DetectLanguages_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::WordVector::DetectLanguagesReply>* WordVector::Stub::AsyncDetectLanguagesRaw(::grpc::ClientContext* context, const ::WordVector::DetectLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::WordVector::DetectLanguagesReply>::Create(channel_.get(), cq, rpcmethod_DetectLanguages_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::WordVector::DetectLanguagesReply>* WordVector::Stub::PrepareAsyncDetectLanguagesRaw(::grpc::ClientContext* context, const ::WordVector::DetectLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::WordVector::DetectLanguagesReply>::Create(channel_.get(), cq, rpcmethod_DetectLanguages_, context, request, false);
}

::grpc::Status WordVector::Stub::GetVectors(::grpc::ClientContext* context, const ::WordVector::GetVectorsRequest& request, ::WordVector::GetVectorsReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVectors_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::WordVector::GetVectorsReply>* WordVector::Stub::AsyncGetVectorsRaw(::grpc::ClientContext* context, const ::WordVector::GetVectorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::WordVector::GetVectorsReply>::Create(channel_.get(), cq, rpcmethod_GetVectors_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::WordVector::GetVectorsReply>* WordVector::Stub::PrepareAsyncGetVectorsRaw(::grpc::ClientContext* context, const ::WordVector::GetVectorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::WordVector::GetVectorsReply>::Create(channel_.get(), cq, rpcmethod_GetVectors_, context, request, false);
}

WordVector::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WordVector_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WordVector::Service, ::WordVector::DetectLanguagesRequest, ::WordVector::DetectLanguagesReply>(
          std::mem_fn(&WordVector::Service::DetectLanguages), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WordVector_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WordVector::Service, ::WordVector::GetVectorsRequest, ::WordVector::GetVectorsReply>(
          std::mem_fn(&WordVector::Service::GetVectors), this)));
}

WordVector::Service::~Service() {
}

::grpc::Status WordVector::Service::DetectLanguages(::grpc::ServerContext* context, const ::WordVector::DetectLanguagesRequest* request, ::WordVector::DetectLanguagesReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WordVector::Service::GetVectors(::grpc::ServerContext* context, const ::WordVector::GetVectorsRequest* request, ::WordVector::GetVectorsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace WordVector

