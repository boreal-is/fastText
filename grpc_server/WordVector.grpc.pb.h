// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: WordVector.proto
#ifndef GRPC_WordVector_2eproto__INCLUDED
#define GRPC_WordVector_2eproto__INCLUDED

#include "WordVector.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace WordVector {

class WordVector final {
 public:
  static constexpr char const* service_full_name() {
    return "WordVector.WordVector";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status DetectLanguages(::grpc::ClientContext* context, const ::WordVector::DetectLanguagesRequest& request, ::WordVector::DetectLanguagesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WordVector::DetectLanguagesReply>> AsyncDetectLanguages(::grpc::ClientContext* context, const ::WordVector::DetectLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WordVector::DetectLanguagesReply>>(AsyncDetectLanguagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WordVector::DetectLanguagesReply>> PrepareAsyncDetectLanguages(::grpc::ClientContext* context, const ::WordVector::DetectLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WordVector::DetectLanguagesReply>>(PrepareAsyncDetectLanguagesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetVectors(::grpc::ClientContext* context, const ::WordVector::GetVectorsRequest& request, ::WordVector::GetVectorsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WordVector::GetVectorsReply>> AsyncGetVectors(::grpc::ClientContext* context, const ::WordVector::GetVectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WordVector::GetVectorsReply>>(AsyncGetVectorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WordVector::GetVectorsReply>> PrepareAsyncGetVectors(::grpc::ClientContext* context, const ::WordVector::GetVectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WordVector::GetVectorsReply>>(PrepareAsyncGetVectorsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::WordVector::DetectLanguagesReply>* AsyncDetectLanguagesRaw(::grpc::ClientContext* context, const ::WordVector::DetectLanguagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::WordVector::DetectLanguagesReply>* PrepareAsyncDetectLanguagesRaw(::grpc::ClientContext* context, const ::WordVector::DetectLanguagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::WordVector::GetVectorsReply>* AsyncGetVectorsRaw(::grpc::ClientContext* context, const ::WordVector::GetVectorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::WordVector::GetVectorsReply>* PrepareAsyncGetVectorsRaw(::grpc::ClientContext* context, const ::WordVector::GetVectorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status DetectLanguages(::grpc::ClientContext* context, const ::WordVector::DetectLanguagesRequest& request, ::WordVector::DetectLanguagesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WordVector::DetectLanguagesReply>> AsyncDetectLanguages(::grpc::ClientContext* context, const ::WordVector::DetectLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WordVector::DetectLanguagesReply>>(AsyncDetectLanguagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WordVector::DetectLanguagesReply>> PrepareAsyncDetectLanguages(::grpc::ClientContext* context, const ::WordVector::DetectLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WordVector::DetectLanguagesReply>>(PrepareAsyncDetectLanguagesRaw(context, request, cq));
    }
    ::grpc::Status GetVectors(::grpc::ClientContext* context, const ::WordVector::GetVectorsRequest& request, ::WordVector::GetVectorsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WordVector::GetVectorsReply>> AsyncGetVectors(::grpc::ClientContext* context, const ::WordVector::GetVectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WordVector::GetVectorsReply>>(AsyncGetVectorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WordVector::GetVectorsReply>> PrepareAsyncGetVectors(::grpc::ClientContext* context, const ::WordVector::GetVectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WordVector::GetVectorsReply>>(PrepareAsyncGetVectorsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::WordVector::DetectLanguagesReply>* AsyncDetectLanguagesRaw(::grpc::ClientContext* context, const ::WordVector::DetectLanguagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::WordVector::DetectLanguagesReply>* PrepareAsyncDetectLanguagesRaw(::grpc::ClientContext* context, const ::WordVector::DetectLanguagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::WordVector::GetVectorsReply>* AsyncGetVectorsRaw(::grpc::ClientContext* context, const ::WordVector::GetVectorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::WordVector::GetVectorsReply>* PrepareAsyncGetVectorsRaw(::grpc::ClientContext* context, const ::WordVector::GetVectorsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DetectLanguages_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVectors_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status DetectLanguages(::grpc::ServerContext* context, const ::WordVector::DetectLanguagesRequest* request, ::WordVector::DetectLanguagesReply* response);
    virtual ::grpc::Status GetVectors(::grpc::ServerContext* context, const ::WordVector::GetVectorsRequest* request, ::WordVector::GetVectorsReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DetectLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DetectLanguages() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DetectLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectLanguages(::grpc::ServerContext* context, const ::WordVector::DetectLanguagesRequest* request, ::WordVector::DetectLanguagesReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetectLanguages(::grpc::ServerContext* context, ::WordVector::DetectLanguagesRequest* request, ::grpc::ServerAsyncResponseWriter< ::WordVector::DetectLanguagesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetVectors() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetVectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVectors(::grpc::ServerContext* context, const ::WordVector::GetVectorsRequest* request, ::WordVector::GetVectorsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVectors(::grpc::ServerContext* context, ::WordVector::GetVectorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::WordVector::GetVectorsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DetectLanguages<WithAsyncMethod_GetVectors<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_DetectLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DetectLanguages() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DetectLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectLanguages(::grpc::ServerContext* context, const ::WordVector::DetectLanguagesRequest* request, ::WordVector::DetectLanguagesReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetVectors() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetVectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVectors(::grpc::ServerContext* context, const ::WordVector::GetVectorsRequest* request, ::WordVector::GetVectorsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DetectLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DetectLanguages() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DetectLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectLanguages(::grpc::ServerContext* context, const ::WordVector::DetectLanguagesRequest* request, ::WordVector::DetectLanguagesReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetectLanguages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetVectors() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetVectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVectors(::grpc::ServerContext* context, const ::WordVector::GetVectorsRequest* request, ::WordVector::GetVectorsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVectors(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DetectLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DetectLanguages() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::WordVector::DetectLanguagesRequest, ::WordVector::DetectLanguagesReply>(std::bind(&WithStreamedUnaryMethod_DetectLanguages<BaseClass>::StreamedDetectLanguages, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DetectLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DetectLanguages(::grpc::ServerContext* context, const ::WordVector::DetectLanguagesRequest* request, ::WordVector::DetectLanguagesReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDetectLanguages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::WordVector::DetectLanguagesRequest,::WordVector::DetectLanguagesReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetVectors() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::WordVector::GetVectorsRequest, ::WordVector::GetVectorsReply>(std::bind(&WithStreamedUnaryMethod_GetVectors<BaseClass>::StreamedGetVectors, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetVectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVectors(::grpc::ServerContext* context, const ::WordVector::GetVectorsRequest* request, ::WordVector::GetVectorsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVectors(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::WordVector::GetVectorsRequest,::WordVector::GetVectorsReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DetectLanguages<WithStreamedUnaryMethod_GetVectors<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DetectLanguages<WithStreamedUnaryMethod_GetVectors<Service > > StreamedService;
};

}  // namespace WordVector


#endif  // GRPC_WordVector_2eproto__INCLUDED
