// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WordVector.proto

#include "WordVector.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace WordVector {
class DetectLanguagesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DetectLanguagesRequest>
      _instance;
} _DetectLanguagesRequest_default_instance_;
class DetectLanguagesReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DetectLanguagesReply>
      _instance;
} _DetectLanguagesReply_default_instance_;
class GetVectorsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetVectorsRequest>
      _instance;
} _GetVectorsRequest_default_instance_;
class GetVectorsReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetVectorsReply>
      _instance;
} _GetVectorsReply_default_instance_;
class DetectedLanguageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DetectedLanguage>
      _instance;
} _DetectedLanguage_default_instance_;
class VectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector>
      _instance;
} _Vector_default_instance_;
}  // namespace WordVector
namespace protobuf_WordVector_2eproto {
void InitDefaultsDetectLanguagesRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::WordVector::_DetectLanguagesRequest_default_instance_;
    new (ptr) ::WordVector::DetectLanguagesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WordVector::DetectLanguagesRequest::InitAsDefaultInstance();
}

void InitDefaultsDetectLanguagesRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDetectLanguagesRequestImpl);
}

void InitDefaultsDetectLanguagesReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_WordVector_2eproto::InitDefaultsDetectedLanguage();
  {
    void* ptr = &::WordVector::_DetectLanguagesReply_default_instance_;
    new (ptr) ::WordVector::DetectLanguagesReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WordVector::DetectLanguagesReply::InitAsDefaultInstance();
}

void InitDefaultsDetectLanguagesReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDetectLanguagesReplyImpl);
}

void InitDefaultsGetVectorsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::WordVector::_GetVectorsRequest_default_instance_;
    new (ptr) ::WordVector::GetVectorsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WordVector::GetVectorsRequest::InitAsDefaultInstance();
}

void InitDefaultsGetVectorsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetVectorsRequestImpl);
}

void InitDefaultsGetVectorsReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_WordVector_2eproto::InitDefaultsVector();
  {
    void* ptr = &::WordVector::_GetVectorsReply_default_instance_;
    new (ptr) ::WordVector::GetVectorsReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WordVector::GetVectorsReply::InitAsDefaultInstance();
}

void InitDefaultsGetVectorsReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetVectorsReplyImpl);
}

void InitDefaultsDetectedLanguageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::WordVector::_DetectedLanguage_default_instance_;
    new (ptr) ::WordVector::DetectedLanguage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WordVector::DetectedLanguage::InitAsDefaultInstance();
}

void InitDefaultsDetectedLanguage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDetectedLanguageImpl);
}

void InitDefaultsVectorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::WordVector::_Vector_default_instance_;
    new (ptr) ::WordVector::Vector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WordVector::Vector::InitAsDefaultInstance();
}

void InitDefaultsVector() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVectorImpl);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WordVector::DetectLanguagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WordVector::DetectLanguagesRequest, texts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WordVector::DetectLanguagesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WordVector::DetectLanguagesReply, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WordVector::GetVectorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WordVector::GetVectorsRequest, tokens_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WordVector::GetVectorsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WordVector::GetVectorsReply, vectors_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WordVector::DetectedLanguage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WordVector::DetectedLanguage, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WordVector::DetectedLanguage, language_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WordVector::Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WordVector::Vector, frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WordVector::Vector, data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::WordVector::DetectLanguagesRequest)},
  { 6, -1, sizeof(::WordVector::DetectLanguagesReply)},
  { 12, -1, sizeof(::WordVector::GetVectorsRequest)},
  { 18, -1, sizeof(::WordVector::GetVectorsReply)},
  { 24, -1, sizeof(::WordVector::DetectedLanguage)},
  { 31, -1, sizeof(::WordVector::Vector)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::WordVector::_DetectLanguagesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::WordVector::_DetectLanguagesReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::WordVector::_GetVectorsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::WordVector::_GetVectorsReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::WordVector::_DetectedLanguage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::WordVector::_Vector_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "WordVector.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020WordVector.proto\022\nWordVector\"\'\n\026Detect"
      "LanguagesRequest\022\r\n\005texts\030\001 \003(\t\"E\n\024Detec"
      "tLanguagesReply\022-\n\007results\030\001 \003(\0132\034.WordV"
      "ector.DetectedLanguage\"#\n\021GetVectorsRequ"
      "est\022\016\n\006tokens\030\001 \003(\t\"6\n\017GetVectorsReply\022#"
      "\n\007vectors\030\001 \003(\0132\022.WordVector.Vector\"2\n\020D"
      "etectedLanguage\022\014\n\004text\030\001 \001(\t\022\020\n\010languag"
      "e\030\002 \001(\t\")\n\006Vector\022\021\n\tfrequency\030\001 \001(\002\022\014\n\004"
      "data\030\002 \001(\0142\263\001\n\nWordVector\022Y\n\017DetectLangu"
      "ages\022\".WordVector.DetectLanguagesRequest"
      "\032 .WordVector.DetectLanguagesReply\"\000\022J\n\n"
      "GetVectors\022\035.WordVector.GetVectorsReques"
      "t\032\033.WordVector.GetVectorsReply\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 520);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WordVector.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_WordVector_2eproto
namespace WordVector {

// ===================================================================

void DetectLanguagesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectLanguagesRequest::kTextsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectLanguagesRequest::DetectLanguagesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_WordVector_2eproto::InitDefaultsDetectLanguagesRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WordVector.DetectLanguagesRequest)
}
DetectLanguagesRequest::DetectLanguagesRequest(const DetectLanguagesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      texts_(from.texts_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:WordVector.DetectLanguagesRequest)
}

void DetectLanguagesRequest::SharedCtor() {
  _cached_size_ = 0;
}

DetectLanguagesRequest::~DetectLanguagesRequest() {
  // @@protoc_insertion_point(destructor:WordVector.DetectLanguagesRequest)
  SharedDtor();
}

void DetectLanguagesRequest::SharedDtor() {
}

void DetectLanguagesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectLanguagesRequest::descriptor() {
  ::protobuf_WordVector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_WordVector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectLanguagesRequest& DetectLanguagesRequest::default_instance() {
  ::protobuf_WordVector_2eproto::InitDefaultsDetectLanguagesRequest();
  return *internal_default_instance();
}

DetectLanguagesRequest* DetectLanguagesRequest::New(::google::protobuf::Arena* arena) const {
  DetectLanguagesRequest* n = new DetectLanguagesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectLanguagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WordVector.DetectLanguagesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  texts_.Clear();
  _internal_metadata_.Clear();
}

bool DetectLanguagesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WordVector.DetectLanguagesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string texts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_texts()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->texts(this->texts_size() - 1).data(),
            static_cast<int>(this->texts(this->texts_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "WordVector.DetectLanguagesRequest.texts"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WordVector.DetectLanguagesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WordVector.DetectLanguagesRequest)
  return false;
#undef DO_
}

void DetectLanguagesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WordVector.DetectLanguagesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string texts = 1;
  for (int i = 0, n = this->texts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->texts(i).data(), static_cast<int>(this->texts(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WordVector.DetectLanguagesRequest.texts");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->texts(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:WordVector.DetectLanguagesRequest)
}

::google::protobuf::uint8* DetectLanguagesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WordVector.DetectLanguagesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string texts = 1;
  for (int i = 0, n = this->texts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->texts(i).data(), static_cast<int>(this->texts(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WordVector.DetectLanguagesRequest.texts");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->texts(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WordVector.DetectLanguagesRequest)
  return target;
}

size_t DetectLanguagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WordVector.DetectLanguagesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string texts = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->texts_size());
  for (int i = 0, n = this->texts_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->texts(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectLanguagesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WordVector.DetectLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectLanguagesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectLanguagesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WordVector.DetectLanguagesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WordVector.DetectLanguagesRequest)
    MergeFrom(*source);
  }
}

void DetectLanguagesRequest::MergeFrom(const DetectLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WordVector.DetectLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  texts_.MergeFrom(from.texts_);
}

void DetectLanguagesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WordVector.DetectLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectLanguagesRequest::CopyFrom(const DetectLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WordVector.DetectLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectLanguagesRequest::IsInitialized() const {
  return true;
}

void DetectLanguagesRequest::Swap(DetectLanguagesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectLanguagesRequest::InternalSwap(DetectLanguagesRequest* other) {
  using std::swap;
  texts_.InternalSwap(&other->texts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectLanguagesRequest::GetMetadata() const {
  protobuf_WordVector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_WordVector_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DetectLanguagesReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectLanguagesReply::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectLanguagesReply::DetectLanguagesReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_WordVector_2eproto::InitDefaultsDetectLanguagesReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WordVector.DetectLanguagesReply)
}
DetectLanguagesReply::DetectLanguagesReply(const DetectLanguagesReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:WordVector.DetectLanguagesReply)
}

void DetectLanguagesReply::SharedCtor() {
  _cached_size_ = 0;
}

DetectLanguagesReply::~DetectLanguagesReply() {
  // @@protoc_insertion_point(destructor:WordVector.DetectLanguagesReply)
  SharedDtor();
}

void DetectLanguagesReply::SharedDtor() {
}

void DetectLanguagesReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectLanguagesReply::descriptor() {
  ::protobuf_WordVector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_WordVector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectLanguagesReply& DetectLanguagesReply::default_instance() {
  ::protobuf_WordVector_2eproto::InitDefaultsDetectLanguagesReply();
  return *internal_default_instance();
}

DetectLanguagesReply* DetectLanguagesReply::New(::google::protobuf::Arena* arena) const {
  DetectLanguagesReply* n = new DetectLanguagesReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectLanguagesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:WordVector.DetectLanguagesReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear();
}

bool DetectLanguagesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WordVector.DetectLanguagesReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WordVector.DetectedLanguage results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WordVector.DetectLanguagesReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WordVector.DetectLanguagesReply)
  return false;
#undef DO_
}

void DetectLanguagesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WordVector.DetectLanguagesReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .WordVector.DetectedLanguage results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:WordVector.DetectLanguagesReply)
}

::google::protobuf::uint8* DetectLanguagesReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WordVector.DetectLanguagesReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .WordVector.DetectedLanguage results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->results(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WordVector.DetectLanguagesReply)
  return target;
}

size_t DetectLanguagesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WordVector.DetectLanguagesReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .WordVector.DetectedLanguage results = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectLanguagesReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WordVector.DetectLanguagesReply)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectLanguagesReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectLanguagesReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WordVector.DetectLanguagesReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WordVector.DetectLanguagesReply)
    MergeFrom(*source);
  }
}

void DetectLanguagesReply::MergeFrom(const DetectLanguagesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WordVector.DetectLanguagesReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void DetectLanguagesReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WordVector.DetectLanguagesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectLanguagesReply::CopyFrom(const DetectLanguagesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WordVector.DetectLanguagesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectLanguagesReply::IsInitialized() const {
  return true;
}

void DetectLanguagesReply::Swap(DetectLanguagesReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectLanguagesReply::InternalSwap(DetectLanguagesReply* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectLanguagesReply::GetMetadata() const {
  protobuf_WordVector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_WordVector_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetVectorsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVectorsRequest::kTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVectorsRequest::GetVectorsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_WordVector_2eproto::InitDefaultsGetVectorsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WordVector.GetVectorsRequest)
}
GetVectorsRequest::GetVectorsRequest(const GetVectorsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tokens_(from.tokens_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:WordVector.GetVectorsRequest)
}

void GetVectorsRequest::SharedCtor() {
  _cached_size_ = 0;
}

GetVectorsRequest::~GetVectorsRequest() {
  // @@protoc_insertion_point(destructor:WordVector.GetVectorsRequest)
  SharedDtor();
}

void GetVectorsRequest::SharedDtor() {
}

void GetVectorsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetVectorsRequest::descriptor() {
  ::protobuf_WordVector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_WordVector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetVectorsRequest& GetVectorsRequest::default_instance() {
  ::protobuf_WordVector_2eproto::InitDefaultsGetVectorsRequest();
  return *internal_default_instance();
}

GetVectorsRequest* GetVectorsRequest::New(::google::protobuf::Arena* arena) const {
  GetVectorsRequest* n = new GetVectorsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetVectorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WordVector.GetVectorsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  _internal_metadata_.Clear();
}

bool GetVectorsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WordVector.GetVectorsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string tokens = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tokens()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tokens(this->tokens_size() - 1).data(),
            static_cast<int>(this->tokens(this->tokens_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "WordVector.GetVectorsRequest.tokens"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WordVector.GetVectorsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WordVector.GetVectorsRequest)
  return false;
#undef DO_
}

void GetVectorsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WordVector.GetVectorsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tokens = 1;
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tokens(i).data(), static_cast<int>(this->tokens(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WordVector.GetVectorsRequest.tokens");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tokens(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:WordVector.GetVectorsRequest)
}

::google::protobuf::uint8* GetVectorsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WordVector.GetVectorsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tokens = 1;
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tokens(i).data(), static_cast<int>(this->tokens(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WordVector.GetVectorsRequest.tokens");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->tokens(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WordVector.GetVectorsRequest)
  return target;
}

size_t GetVectorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WordVector.GetVectorsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string tokens = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tokens_size());
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tokens(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetVectorsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WordVector.GetVectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVectorsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetVectorsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WordVector.GetVectorsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WordVector.GetVectorsRequest)
    MergeFrom(*source);
  }
}

void GetVectorsRequest::MergeFrom(const GetVectorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WordVector.GetVectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
}

void GetVectorsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WordVector.GetVectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVectorsRequest::CopyFrom(const GetVectorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WordVector.GetVectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVectorsRequest::IsInitialized() const {
  return true;
}

void GetVectorsRequest::Swap(GetVectorsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetVectorsRequest::InternalSwap(GetVectorsRequest* other) {
  using std::swap;
  tokens_.InternalSwap(&other->tokens_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetVectorsRequest::GetMetadata() const {
  protobuf_WordVector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_WordVector_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetVectorsReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVectorsReply::kVectorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVectorsReply::GetVectorsReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_WordVector_2eproto::InitDefaultsGetVectorsReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WordVector.GetVectorsReply)
}
GetVectorsReply::GetVectorsReply(const GetVectorsReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vectors_(from.vectors_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:WordVector.GetVectorsReply)
}

void GetVectorsReply::SharedCtor() {
  _cached_size_ = 0;
}

GetVectorsReply::~GetVectorsReply() {
  // @@protoc_insertion_point(destructor:WordVector.GetVectorsReply)
  SharedDtor();
}

void GetVectorsReply::SharedDtor() {
}

void GetVectorsReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetVectorsReply::descriptor() {
  ::protobuf_WordVector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_WordVector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetVectorsReply& GetVectorsReply::default_instance() {
  ::protobuf_WordVector_2eproto::InitDefaultsGetVectorsReply();
  return *internal_default_instance();
}

GetVectorsReply* GetVectorsReply::New(::google::protobuf::Arena* arena) const {
  GetVectorsReply* n = new GetVectorsReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetVectorsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:WordVector.GetVectorsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vectors_.Clear();
  _internal_metadata_.Clear();
}

bool GetVectorsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WordVector.GetVectorsReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WordVector.Vector vectors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_vectors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WordVector.GetVectorsReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WordVector.GetVectorsReply)
  return false;
#undef DO_
}

void GetVectorsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WordVector.GetVectorsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .WordVector.Vector vectors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vectors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vectors(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:WordVector.GetVectorsReply)
}

::google::protobuf::uint8* GetVectorsReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WordVector.GetVectorsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .WordVector.Vector vectors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vectors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->vectors(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WordVector.GetVectorsReply)
  return target;
}

size_t GetVectorsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WordVector.GetVectorsReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .WordVector.Vector vectors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vectors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vectors(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetVectorsReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WordVector.GetVectorsReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVectorsReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetVectorsReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WordVector.GetVectorsReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WordVector.GetVectorsReply)
    MergeFrom(*source);
  }
}

void GetVectorsReply::MergeFrom(const GetVectorsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WordVector.GetVectorsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vectors_.MergeFrom(from.vectors_);
}

void GetVectorsReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WordVector.GetVectorsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVectorsReply::CopyFrom(const GetVectorsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WordVector.GetVectorsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVectorsReply::IsInitialized() const {
  return true;
}

void GetVectorsReply::Swap(GetVectorsReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetVectorsReply::InternalSwap(GetVectorsReply* other) {
  using std::swap;
  vectors_.InternalSwap(&other->vectors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetVectorsReply::GetMetadata() const {
  protobuf_WordVector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_WordVector_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DetectedLanguage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectedLanguage::kTextFieldNumber;
const int DetectedLanguage::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectedLanguage::DetectedLanguage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_WordVector_2eproto::InitDefaultsDetectedLanguage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WordVector.DetectedLanguage)
}
DetectedLanguage::DetectedLanguage(const DetectedLanguage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language().size() > 0) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  // @@protoc_insertion_point(copy_constructor:WordVector.DetectedLanguage)
}

void DetectedLanguage::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DetectedLanguage::~DetectedLanguage() {
  // @@protoc_insertion_point(destructor:WordVector.DetectedLanguage)
  SharedDtor();
}

void DetectedLanguage::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DetectedLanguage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedLanguage::descriptor() {
  ::protobuf_WordVector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_WordVector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectedLanguage& DetectedLanguage::default_instance() {
  ::protobuf_WordVector_2eproto::InitDefaultsDetectedLanguage();
  return *internal_default_instance();
}

DetectedLanguage* DetectedLanguage::New(::google::protobuf::Arena* arena) const {
  DetectedLanguage* n = new DetectedLanguage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectedLanguage::Clear() {
// @@protoc_insertion_point(message_clear_start:WordVector.DetectedLanguage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DetectedLanguage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WordVector.DetectedLanguage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "WordVector.DetectedLanguage.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language().data(), static_cast<int>(this->language().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "WordVector.DetectedLanguage.language"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WordVector.DetectedLanguage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WordVector.DetectedLanguage)
  return false;
#undef DO_
}

void DetectedLanguage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WordVector.DetectedLanguage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WordVector.DetectedLanguage.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // string language = 2;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WordVector.DetectedLanguage.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->language(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:WordVector.DetectedLanguage)
}

::google::protobuf::uint8* DetectedLanguage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WordVector.DetectedLanguage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WordVector.DetectedLanguage.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // string language = 2;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WordVector.DetectedLanguage.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->language(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WordVector.DetectedLanguage)
  return target;
}

size_t DetectedLanguage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WordVector.DetectedLanguage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // string language = 2;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedLanguage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WordVector.DetectedLanguage)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedLanguage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectedLanguage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WordVector.DetectedLanguage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WordVector.DetectedLanguage)
    MergeFrom(*source);
  }
}

void DetectedLanguage::MergeFrom(const DetectedLanguage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WordVector.DetectedLanguage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
}

void DetectedLanguage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WordVector.DetectedLanguage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedLanguage::CopyFrom(const DetectedLanguage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WordVector.DetectedLanguage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedLanguage::IsInitialized() const {
  return true;
}

void DetectedLanguage::Swap(DetectedLanguage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectedLanguage::InternalSwap(DetectedLanguage* other) {
  using std::swap;
  text_.Swap(&other->text_);
  language_.Swap(&other->language_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectedLanguage::GetMetadata() const {
  protobuf_WordVector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_WordVector_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vector::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector::kFrequencyFieldNumber;
const int Vector::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector::Vector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_WordVector_2eproto::InitDefaultsVector();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WordVector.Vector)
}
Vector::Vector(const Vector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  frequency_ = from.frequency_;
  // @@protoc_insertion_point(copy_constructor:WordVector.Vector)
}

void Vector::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frequency_ = 0;
  _cached_size_ = 0;
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:WordVector.Vector)
  SharedDtor();
}

void Vector::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector::descriptor() {
  ::protobuf_WordVector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_WordVector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector& Vector::default_instance() {
  ::protobuf_WordVector_2eproto::InitDefaultsVector();
  return *internal_default_instance();
}

Vector* Vector::New(::google::protobuf::Arena* arena) const {
  Vector* n = new Vector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:WordVector.Vector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frequency_ = 0;
  _internal_metadata_.Clear();
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WordVector.Vector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float frequency = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WordVector.Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WordVector.Vector)
  return false;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WordVector.Vector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float frequency = 1;
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->frequency(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:WordVector.Vector)
}

::google::protobuf::uint8* Vector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WordVector.Vector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float frequency = 1;
  if (this->frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->frequency(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WordVector.Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WordVector.Vector)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // float frequency = 1;
  if (this->frequency() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WordVector.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WordVector.Vector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WordVector.Vector)
    MergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WordVector.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
}

void Vector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WordVector.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WordVector.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  return true;
}

void Vector::Swap(Vector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector::InternalSwap(Vector* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(frequency_, other->frequency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector::GetMetadata() const {
  protobuf_WordVector_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_WordVector_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace WordVector

// @@protoc_insertion_point(global_scope)
